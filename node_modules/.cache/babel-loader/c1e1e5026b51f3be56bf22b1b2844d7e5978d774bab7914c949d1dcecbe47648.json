{"ast":null,"code":"import { drinkSorter } from \"./drinkSorter\";\nimport { passedDrinksCounter } from \"./passedDrinkCounter\";\n\n// https://docs.google.com/document/d/1J8gMJdqBdbox462-ERcvf5BYWfcBHa0Hvqrgw0T2bLs/edit\n\nexport const graphDataCalculator = _ref => {\n  let {\n    widmarkFactor,\n    absorptionRate,\n    eliminationRate,\n    weight,\n    drinks\n  } = _ref;\n  let descendingDrinks = drinkSorter(drinks, false);\n  let justDrank = parseFloat(descendingDrinks[descendingDrinks.length - 1].timePassed) < 0.3;\n  let maxTime = parseFloat(descendingDrinks[0].timePassed);\n  let curBacIdx = maxTime / 0.01 - 1;\n  let Time = 0;\n  let graphBacData = [];\n  let Bac = 0;\n  while (Bac >= 0) {\n    Bac = 0;\n    for (const drink of descendingDrinks) {\n      if (parseFloat(drink.timePassed) > maxTime - Time) {\n        const activeTime = parseFloat(drink.timePassed) - (maxTime - Time);\n        const alcoholMass = parseFloat(drink.volume) * 0.0007893 * (parseFloat(drink.abv) / 100);\n        const numerator = alcoholMass * (1 - Math.E ** (-absorptionRate * activeTime));\n        const denominator = widmarkFactor * weight;\n        Bac = Bac + numerator / denominator * 100;\n      }\n    }\n    if (Bac - Time * eliminationRate < 0 && Time > maxTime) {\n      graphBacData.push(0);\n      break;\n    } else if (Bac - Time * eliminationRate < 0) {\n      let soberTime = maxTime - Time;\n      if (descendingDrinks.length === 1) {\n        graphBacData = graphBacData.concat(Array(Math.round(soberTime / 0.01)).fill(0));\n        curBacIdx = graphBacData.length - 1;\n        break;\n      } else {\n        const passsedDrinks = passedDrinksCounter(descendingDrinks, Time, maxTime);\n        if (passsedDrinks === descendingDrinks.length) {\n          graphBacData = graphBacData.concat(Array(Math.round(soberTime / 0.01)).fill(0));\n          curBacIdx = graphBacData.length - 1;\n          break;\n        } else {\n          soberTime = parseFloat(descendingDrinks[passsedDrinks - 1].timePassed) - Time - parseFloat(descendingDrinks[passsedDrinks].timePassed);\n          graphBacData = graphBacData.concat(Array(Math.round(soberTime / 0.01)).fill(0));\n          descendingDrinks.splice(0, passsedDrinks);\n          maxTime = parseFloat(descendingDrinks[0].timePassed);\n          Time = 0;\n        }\n      }\n    } else {\n      graphBacData.push((Bac - Time * eliminationRate) * 10);\n      Time += 0.01;\n    }\n  }\n  let soberingIdx = justDrank ? curBacIdx + 30 : curBacIdx;\n  return {\n    graphBacData,\n    currentBac: graphBacData[curBacIdx],\n    curBacIdx,\n    soberingIdx\n  };\n};","map":{"version":3,"names":["drinkSorter","passedDrinksCounter","graphDataCalculator","_ref","widmarkFactor","absorptionRate","eliminationRate","weight","drinks","descendingDrinks","justDrank","parseFloat","length","timePassed","maxTime","curBacIdx","Time","graphBacData","Bac","drink","activeTime","alcoholMass","volume","abv","numerator","Math","E","denominator","push","soberTime","concat","Array","round","fill","passsedDrinks","splice","soberingIdx","currentBac"],"sources":["D:/Soft/DIPLOM PROJECT/GitProject/bac/src/utils/graphDataCalculator.ts"],"sourcesContent":["import { drinkType } from \"../types\"\nimport { drinkSorter } from \"./drinkSorter\"\nimport { passedDrinksCounter } from \"./passedDrinkCounter\"\n\n// https://docs.google.com/document/d/1J8gMJdqBdbox462-ERcvf5BYWfcBHa0Hvqrgw0T2bLs/edit\n\nexport const graphDataCalculator = ({\n  widmarkFactor,\n  absorptionRate,\n  eliminationRate,\n  weight,\n  drinks,\n}: {\n  widmarkFactor: number\n  absorptionRate: number\n  eliminationRate: number\n  weight: number\n  drinks: drinkType[]\n}) => {\n  let descendingDrinks = drinkSorter(drinks, false)\n\n  let justDrank =\n    parseFloat(descendingDrinks[descendingDrinks.length - 1].timePassed) < 0.3\n  let maxTime = parseFloat(descendingDrinks[0].timePassed)\n  let curBacIdx = maxTime / 0.01 - 1\n  let Time = 0\n  let graphBacData: number[] = []\n  let Bac = 0\n\n  while (Bac >= 0) {\n    Bac = 0\n    for (const drink of descendingDrinks) {\n      if (parseFloat(drink.timePassed) > maxTime - Time) {\n        const activeTime = parseFloat(drink.timePassed) - (maxTime - Time)\n        const alcoholMass =\n          parseFloat(drink.volume) * 0.0007893 * (parseFloat(drink.abv) / 100)\n        const numerator =\n          alcoholMass * (1 - Math.E ** (-absorptionRate * activeTime))\n        const denominator = widmarkFactor * weight\n        Bac = Bac + (numerator / denominator) * 100\n      }\n    }\n    if (Bac - Time * eliminationRate < 0 && Time > maxTime) {\n      graphBacData.push(0)\n      break\n    } else if (Bac - Time * eliminationRate < 0) {\n      let soberTime = maxTime - Time\n\n      if (descendingDrinks.length === 1) {\n        graphBacData = graphBacData.concat(\n          Array(Math.round(soberTime / 0.01)).fill(0)\n        )\n        curBacIdx = graphBacData.length - 1\n        break\n      } else {\n        const passsedDrinks = passedDrinksCounter(\n          descendingDrinks,\n          Time,\n          maxTime\n        )\n        if (passsedDrinks === descendingDrinks.length) {\n          graphBacData = graphBacData.concat(\n            Array(Math.round(soberTime / 0.01)).fill(0)\n          )\n          curBacIdx = graphBacData.length - 1\n          break\n        } else {\n          soberTime =\n            parseFloat(descendingDrinks[passsedDrinks - 1].timePassed) -\n            Time -\n            parseFloat(descendingDrinks[passsedDrinks].timePassed)\n          graphBacData = graphBacData.concat(\n            Array(Math.round(soberTime / 0.01)).fill(0)\n          )\n          descendingDrinks.splice(0, passsedDrinks)\n          maxTime = parseFloat(descendingDrinks[0].timePassed)\n          Time = 0\n        }\n      }\n    } else {\n      graphBacData.push((Bac - Time * eliminationRate) * 10)\n      Time += 0.01\n    }\n  }\n  let soberingIdx = justDrank ? curBacIdx + 30 : curBacIdx\n  return {\n    graphBacData,\n    currentBac: graphBacData[curBacIdx],\n    curBacIdx,\n    soberingIdx,\n  }\n}\n"],"mappings":"AACA,SAASA,WAAW,QAAQ,eAAe;AAC3C,SAASC,mBAAmB,QAAQ,sBAAsB;;AAE1D;;AAEA,OAAO,MAAMC,mBAAmB,GAAGC,IAAA,IAY7B;EAAA,IAZ8B;IAClCC,aAAa;IACbC,cAAc;IACdC,eAAe;IACfC,MAAM;IACNC;EAOF,CAAC,GAAAL,IAAA;EACC,IAAIM,gBAAgB,GAAGT,WAAW,CAACQ,MAAM,EAAE,KAAK,CAAC;EAEjD,IAAIE,SAAS,GACXC,UAAU,CAACF,gBAAgB,CAACA,gBAAgB,CAACG,MAAM,GAAG,CAAC,CAAC,CAACC,UAAU,CAAC,GAAG,GAAG;EAC5E,IAAIC,OAAO,GAAGH,UAAU,CAACF,gBAAgB,CAAC,CAAC,CAAC,CAACI,UAAU,CAAC;EACxD,IAAIE,SAAS,GAAGD,OAAO,GAAG,IAAI,GAAG,CAAC;EAClC,IAAIE,IAAI,GAAG,CAAC;EACZ,IAAIC,YAAsB,GAAG,EAAE;EAC/B,IAAIC,GAAG,GAAG,CAAC;EAEX,OAAOA,GAAG,IAAI,CAAC,EAAE;IACfA,GAAG,GAAG,CAAC;IACP,KAAK,MAAMC,KAAK,IAAIV,gBAAgB,EAAE;MACpC,IAAIE,UAAU,CAACQ,KAAK,CAACN,UAAU,CAAC,GAAGC,OAAO,GAAGE,IAAI,EAAE;QACjD,MAAMI,UAAU,GAAGT,UAAU,CAACQ,KAAK,CAACN,UAAU,CAAC,IAAIC,OAAO,GAAGE,IAAI,CAAC;QAClE,MAAMK,WAAW,GACfV,UAAU,CAACQ,KAAK,CAACG,MAAM,CAAC,GAAG,SAAS,IAAIX,UAAU,CAACQ,KAAK,CAACI,GAAG,CAAC,GAAG,GAAG,CAAC;QACtE,MAAMC,SAAS,GACbH,WAAW,IAAI,CAAC,GAAGI,IAAI,CAACC,CAAC,KAAK,CAACrB,cAAc,GAAGe,UAAU,CAAC,CAAC;QAC9D,MAAMO,WAAW,GAAGvB,aAAa,GAAGG,MAAM;QAC1CW,GAAG,GAAGA,GAAG,GAAIM,SAAS,GAAGG,WAAW,GAAI,GAAG;MAC7C;IACF;IACA,IAAIT,GAAG,GAAGF,IAAI,GAAGV,eAAe,GAAG,CAAC,IAAIU,IAAI,GAAGF,OAAO,EAAE;MACtDG,YAAY,CAACW,IAAI,CAAC,CAAC,CAAC;MACpB;IACF,CAAC,MAAM,IAAIV,GAAG,GAAGF,IAAI,GAAGV,eAAe,GAAG,CAAC,EAAE;MAC3C,IAAIuB,SAAS,GAAGf,OAAO,GAAGE,IAAI;MAE9B,IAAIP,gBAAgB,CAACG,MAAM,KAAK,CAAC,EAAE;QACjCK,YAAY,GAAGA,YAAY,CAACa,MAAM,CAChCC,KAAK,CAACN,IAAI,CAACO,KAAK,CAACH,SAAS,GAAG,IAAI,CAAC,CAAC,CAACI,IAAI,CAAC,CAAC,CAAC,CAC5C;QACDlB,SAAS,GAAGE,YAAY,CAACL,MAAM,GAAG,CAAC;QACnC;MACF,CAAC,MAAM;QACL,MAAMsB,aAAa,GAAGjC,mBAAmB,CACvCQ,gBAAgB,EAChBO,IAAI,EACJF,OAAO,CACR;QACD,IAAIoB,aAAa,KAAKzB,gBAAgB,CAACG,MAAM,EAAE;UAC7CK,YAAY,GAAGA,YAAY,CAACa,MAAM,CAChCC,KAAK,CAACN,IAAI,CAACO,KAAK,CAACH,SAAS,GAAG,IAAI,CAAC,CAAC,CAACI,IAAI,CAAC,CAAC,CAAC,CAC5C;UACDlB,SAAS,GAAGE,YAAY,CAACL,MAAM,GAAG,CAAC;UACnC;QACF,CAAC,MAAM;UACLiB,SAAS,GACPlB,UAAU,CAACF,gBAAgB,CAACyB,aAAa,GAAG,CAAC,CAAC,CAACrB,UAAU,CAAC,GAC1DG,IAAI,GACJL,UAAU,CAACF,gBAAgB,CAACyB,aAAa,CAAC,CAACrB,UAAU,CAAC;UACxDI,YAAY,GAAGA,YAAY,CAACa,MAAM,CAChCC,KAAK,CAACN,IAAI,CAACO,KAAK,CAACH,SAAS,GAAG,IAAI,CAAC,CAAC,CAACI,IAAI,CAAC,CAAC,CAAC,CAC5C;UACDxB,gBAAgB,CAAC0B,MAAM,CAAC,CAAC,EAAED,aAAa,CAAC;UACzCpB,OAAO,GAAGH,UAAU,CAACF,gBAAgB,CAAC,CAAC,CAAC,CAACI,UAAU,CAAC;UACpDG,IAAI,GAAG,CAAC;QACV;MACF;IACF,CAAC,MAAM;MACLC,YAAY,CAACW,IAAI,CAAC,CAACV,GAAG,GAAGF,IAAI,GAAGV,eAAe,IAAI,EAAE,CAAC;MACtDU,IAAI,IAAI,IAAI;IACd;EACF;EACA,IAAIoB,WAAW,GAAG1B,SAAS,GAAGK,SAAS,GAAG,EAAE,GAAGA,SAAS;EACxD,OAAO;IACLE,YAAY;IACZoB,UAAU,EAAEpB,YAAY,CAACF,SAAS,CAAC;IACnCA,SAAS;IACTqB;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}