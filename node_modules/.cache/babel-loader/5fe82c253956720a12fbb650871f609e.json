{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nexport const useLocalStorage = (key, initialValue) => {\n  _s();\n\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key); // Parse stored json or if none return initialValue\n\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      return initialValue;\n    }\n  }); // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value; // Save state\n\n      setStoredValue(valueToStore); // Save to local storage\n\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {// A more advanced implementation would handle the error case\n    }\n  };\n\n  return [storedValue, setValue];\n};\n\n_s(useLocalStorage, \"U2X7phwSbcohaG8LvMqphMy/k4E=\");","map":{"version":3,"names":["useState","useLocalStorage","key","initialValue","storedValue","setStoredValue","item","window","localStorage","getItem","JSON","parse","error","setValue","value","valueToStore","Function","setItem","stringify"],"sources":["C:/Users/Legallaized/DIPLOM PROJECT/IngProject/src/utils/useLocalState.ts"],"sourcesContent":["import { useState } from \"react\"\n\nexport const useLocalStorage = (key: string, initialValue: any) => {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key)\n\n      // Parse stored json or if none return initialValue\n\n      return item ? JSON.parse(item) : initialValue\n    } catch (error) {\n      // If error also return initialValue\n\n      return initialValue\n    }\n  })\n\n  // Return a wrapped version of useState's setter function that ...\n\n  // ... persists the new value to localStorage.\n\n  const setValue = (value: any) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value\n\n      // Save state\n\n      setStoredValue(valueToStore)\n\n      // Save to local storage\n\n      window.localStorage.setItem(key, JSON.stringify(valueToStore))\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n    }\n  }\n\n  return [storedValue, setValue]\n}\n"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAO,MAAMC,eAAe,GAAG,CAACC,GAAD,EAAcC,YAAd,KAAoC;EAAA;;EACjE,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,MAAM;IACnD,IAAI;MACF;MACA,MAAMM,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BP,GAA5B,CAAb,CAFE,CAIF;;MAEA,OAAOI,IAAI,GAAGI,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAH,GAAsBH,YAAjC;IACD,CAPD,CAOE,OAAOS,KAAP,EAAc;MACd;MAEA,OAAOT,YAAP;IACD;EACF,CAb6C,CAA9C,CADiE,CAgBjE;EAEA;;EAEA,MAAMU,QAAQ,GAAIC,KAAD,IAAgB;IAC/B,IAAI;MACF;MAEA,MAAMC,YAAY,GAChBD,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACV,WAAD,CAAjC,GAAiDU,KADnD,CAHE,CAMF;;MAEAT,cAAc,CAACU,YAAD,CAAd,CARE,CAUF;;MAEAR,MAAM,CAACC,YAAP,CAAoBS,OAApB,CAA4Bf,GAA5B,EAAiCQ,IAAI,CAACQ,SAAL,CAAeH,YAAf,CAAjC;IACD,CAbD,CAaE,OAAOH,KAAP,EAAc,CACd;IACD;EACF,CAjBD;;EAmBA,OAAO,CAACR,WAAD,EAAcS,QAAd,CAAP;AACD,CAxCM;;GAAMZ,e"},"metadata":{},"sourceType":"module"}