{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nexport const useLocalStorage = (key, initialValue) => {\n  _s();\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n\n      // Parse stored json or if none return initialValue\n\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n\n  // ... persists the new value to localStorage.\n\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n\n      // Save state\n\n      setStoredValue(valueToStore);\n\n      // Save to local storage\n\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n    }\n  };\n  return [storedValue, setValue];\n};\n_s(useLocalStorage, \"U2X7phwSbcohaG8LvMqphMy/k4E=\");","map":{"version":3,"names":["useState","useLocalStorage","key","initialValue","_s","storedValue","setStoredValue","item","window","localStorage","getItem","JSON","parse","error","setValue","value","valueToStore","Function","setItem","stringify"],"sources":["D:/Soft/DIPLOM PROJECT/GitProject/bac/src/utils/useLocalState.ts"],"sourcesContent":["import { useState } from \"react\"\n\nexport const useLocalStorage = (key: string, initialValue: any) => {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key)\n\n      // Parse stored json or if none return initialValue\n\n      return item ? JSON.parse(item) : initialValue\n    } catch (error) {\n      // If error also return initialValue\n\n      return initialValue\n    }\n  })\n\n  // Return a wrapped version of useState's setter function that ...\n\n  // ... persists the new value to localStorage.\n\n  const setValue = (value: any) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value\n\n      // Save state\n\n      setStoredValue(valueToStore)\n\n      // Save to local storage\n\n      window.localStorage.setItem(key, JSON.stringify(valueToStore))\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n    }\n  }\n\n  return [storedValue, setValue]\n}\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,OAAO,MAAMC,eAAe,GAAGA,CAACC,GAAW,EAAEC,YAAiB,KAAK;EAAAC,EAAA;EACjE,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,MAAM;IACnD,IAAI;MACF;MACA,MAAMO,IAAI,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAACR,GAAG,CAAC;;MAE7C;;MAEA,OAAOK,IAAI,GAAGI,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC,GAAGJ,YAAY;IAC/C,CAAC,CAAC,OAAOU,KAAK,EAAE;MACd;;MAEA,OAAOV,YAAY;IACrB;EACF,CAAC,CAAC;;EAEF;;EAEA;;EAEA,MAAMW,QAAQ,GAAIC,KAAU,IAAK;IAC/B,IAAI;MACF;;MAEA,MAAMC,YAAY,GAChBD,KAAK,YAAYE,QAAQ,GAAGF,KAAK,CAACV,WAAW,CAAC,GAAGU,KAAK;;MAExD;;MAEAT,cAAc,CAACU,YAAY,CAAC;;MAE5B;;MAEAR,MAAM,CAACC,YAAY,CAACS,OAAO,CAAChB,GAAG,EAAES,IAAI,CAACQ,SAAS,CAACH,YAAY,CAAC,CAAC;IAChE,CAAC,CAAC,OAAOH,KAAK,EAAE;MACd;IAAA;EAEJ,CAAC;EAED,OAAO,CAACR,WAAW,EAAES,QAAQ,CAAC;AAChC,CAAC;AAAAV,EAAA,CAxCYH,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}