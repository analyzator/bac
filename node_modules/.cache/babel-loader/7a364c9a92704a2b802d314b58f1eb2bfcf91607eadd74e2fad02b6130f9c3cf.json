{"ast":null,"code":"import _slicedToArray from\"D:/Soft/DIPLOM PROJECT/GitProject/bac/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState}from\"react\";export var useLocalStorage=function useLocalStorage(key,initialValue){var _useState=useState(function(){try{// Get from local storage by key\nvar item=window.localStorage.getItem(key);// Parse stored json or if none return initialValue\nreturn item?JSON.parse(item):initialValue;}catch(error){// If error also return initialValue\nreturn initialValue;}}),_useState2=_slicedToArray(_useState,2),storedValue=_useState2[0],setStoredValue=_useState2[1];// Return a wrapped version of useState's setter function that ...\n// ... persists the new value to localStorage.\nvar setValue=function setValue(value){try{// Allow value to be a function so we have same API as useState\nvar valueToStore=value instanceof Function?value(storedValue):value;// Save state\nsetStoredValue(valueToStore);// Save to local storage\nwindow.localStorage.setItem(key,JSON.stringify(valueToStore));}catch(error){// A more advanced implementation would handle the error case\n}};return[storedValue,setValue];};","map":{"version":3,"names":["useState","useLocalStorage","key","initialValue","_useState","item","window","localStorage","getItem","JSON","parse","error","_useState2","_slicedToArray","storedValue","setStoredValue","setValue","value","valueToStore","Function","setItem","stringify"],"sources":["D:/Soft/DIPLOM PROJECT/GitProject/bac/src/utils/useLocalState.ts"],"sourcesContent":["import { useState } from \"react\"\n\nexport const useLocalStorage = (key: string, initialValue: any) => {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key)\n\n      // Parse stored json or if none return initialValue\n\n      return item ? JSON.parse(item) : initialValue\n    } catch (error) {\n      // If error also return initialValue\n\n      return initialValue\n    }\n  })\n\n  // Return a wrapped version of useState's setter function that ...\n\n  // ... persists the new value to localStorage.\n\n  const setValue = (value: any) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value\n\n      // Save state\n\n      setStoredValue(valueToStore)\n\n      // Save to local storage\n\n      window.localStorage.setItem(key, JSON.stringify(valueToStore))\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n    }\n  }\n\n  return [storedValue, setValue]\n}\n"],"mappings":"2HAAA,OAASA,QAAQ,KAAQ,OAAO,CAEhC,MAAO,IAAM,CAAAC,eAAe,CAAG,QAAlB,CAAAA,eAAeA,CAAIC,GAAW,CAAEC,YAAiB,CAAK,CACjE,IAAAC,SAAA,CAAsCJ,QAAQ,CAAC,UAAM,CACnD,GAAI,CACF;AACA,GAAM,CAAAK,IAAI,CAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAACN,GAAG,CAAC,CAE7C;AAEA,MAAO,CAAAG,IAAI,CAAGI,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC,CAAGF,YAAY,CAC/C,CAAE,MAAOQ,KAAK,CAAE,CACd;AAEA,MAAO,CAAAR,YAAY,CACrB,CACF,CAAC,CAAC,CAAAS,UAAA,CAAAC,cAAA,CAAAT,SAAA,IAbKU,WAAW,CAAAF,UAAA,IAAEG,cAAc,CAAAH,UAAA,IAelC;AAEA;AAEA,GAAM,CAAAI,QAAQ,CAAG,QAAX,CAAAA,QAAQA,CAAIC,KAAU,CAAK,CAC/B,GAAI,CACF;AAEA,GAAM,CAAAC,YAAY,CAChBD,KAAK,WAAY,CAAAE,QAAQ,CAAGF,KAAK,CAACH,WAAW,CAAC,CAAGG,KAAK,CAExD;AAEAF,cAAc,CAACG,YAAY,CAAC,CAE5B;AAEAZ,MAAM,CAACC,YAAY,CAACa,OAAO,CAAClB,GAAG,CAAEO,IAAI,CAACY,SAAS,CAACH,YAAY,CAAC,CAAC,CAChE,CAAE,MAAOP,KAAK,CAAE,CACd;AAAA,CAEJ,CAAC,CAED,MAAO,CAACG,WAAW,CAAEE,QAAQ,CAAC,CAChC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}