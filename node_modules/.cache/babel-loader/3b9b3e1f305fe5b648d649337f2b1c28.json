{"ast":null,"code":"import _slicedToArray from\"D:/Soft/DIPLOM PROJECT/IngProject/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState}from\"react\";export var useLocalStorage=function useLocalStorage(key,initialValue){var _useState=useState(function(){try{// Get from local storage by key\nvar item=window.localStorage.getItem(key);// Parse stored json or if none return initialValue\nreturn item?JSON.parse(item):initialValue;}catch(error){// If error also return initialValue\nreturn initialValue;}}),_useState2=_slicedToArray(_useState,2),storedValue=_useState2[0],setStoredValue=_useState2[1];// Return a wrapped version of useState's setter function that ...\n// ... persists the new value to localStorage.\nvar setValue=function setValue(value){try{// Allow value to be a function so we have same API as useState\nvar valueToStore=value instanceof Function?value(storedValue):value;// Save state\nsetStoredValue(valueToStore);// Save to local storage\nwindow.localStorage.setItem(key,JSON.stringify(valueToStore));}catch(error){// A more advanced implementation would handle the error case\n}};return[storedValue,setValue];};","map":{"version":3,"names":["useState","useLocalStorage","key","initialValue","item","window","localStorage","getItem","JSON","parse","error","storedValue","setStoredValue","setValue","value","valueToStore","Function","setItem","stringify"],"sources":["D:/Soft/DIPLOM PROJECT/IngProject/src/utils/useLocalState.ts"],"sourcesContent":["import { useState } from \"react\"\n\nexport const useLocalStorage = (key: string, initialValue: any) => {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key)\n\n      // Parse stored json or if none return initialValue\n\n      return item ? JSON.parse(item) : initialValue\n    } catch (error) {\n      // If error also return initialValue\n\n      return initialValue\n    }\n  })\n\n  // Return a wrapped version of useState's setter function that ...\n\n  // ... persists the new value to localStorage.\n\n  const setValue = (value: any) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value\n\n      // Save state\n\n      setStoredValue(valueToStore)\n\n      // Save to local storage\n\n      window.localStorage.setItem(key, JSON.stringify(valueToStore))\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n    }\n  }\n\n  return [storedValue, setValue]\n}\n"],"mappings":"uHAAA,OAASA,QAAT,KAAyB,OAAzB,CAEA,MAAO,IAAMC,gBAAe,CAAG,QAAlBA,gBAAkB,CAACC,GAAD,CAAcC,YAAd,CAAoC,CACjE,cAAsCH,QAAQ,CAAC,UAAM,CACnD,GAAI,CACF;AACA,GAAMI,KAAI,CAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BL,GAA5B,CAAb,CAEA;AAEA,MAAOE,KAAI,CAAGI,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAH,CAAsBD,YAAjC,CACD,CAAC,MAAOO,KAAP,CAAc,CACd;AAEA,MAAOP,aAAP,CACD,CACF,CAb6C,CAA9C,wCAAOQ,WAAP,eAAoBC,cAApB,eAeA;AAEA;AAEA,GAAMC,SAAQ,CAAG,QAAXA,SAAW,CAACC,KAAD,CAAgB,CAC/B,GAAI,CACF;AAEA,GAAMC,aAAY,CAChBD,KAAK,WAAYE,SAAjB,CAA4BF,KAAK,CAACH,WAAD,CAAjC,CAAiDG,KADnD,CAGA;AAEAF,cAAc,CAACG,YAAD,CAAd,CAEA;AAEAV,MAAM,CAACC,YAAP,CAAoBW,OAApB,CAA4Bf,GAA5B,CAAiCM,IAAI,CAACU,SAAL,CAAeH,YAAf,CAAjC,EACD,CAAC,MAAOL,KAAP,CAAc,CACd;AACD,CACF,CAjBD,CAmBA,MAAO,CAACC,WAAD,CAAcE,QAAd,CAAP,CACD,CAxCM"},"metadata":{},"sourceType":"module"}